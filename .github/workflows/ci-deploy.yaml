# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Build Step

on:
  push:
    branches: ["main"]
#   pull_request:
#     branches: [ "main" ]

jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       node-version: [20]
  #       # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #         cache: "npm"
  #     - run: npm ci
  #     - run: npm run build --if-present

  # test-stage:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Running Tests
  #       uses: actions/checkout@v4
  #     - run: echo "running Tests"

  build-and-push-docker-image:
    name: Build Docker image and push to repositories
    # run only when code is compiling and tests are passing
    runs-on: ubuntu-latest
    # needs: ["build", "test-stage"]

    # steps to perform in job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # setup Docker buld action
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Login to Github Packages
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.G_TOKEN }}

      - name: Read Local Environment Variables
        run: |
          export $(cat build.config | xargs)
          echo $BUILD

      - name: Print Local Environment Variables
        run: |
          echo $BUILD
          env | grep -i build

      - name: Read Environment Variables
        run: |
          while IFS='=' read -r key value; do
            value="${value//\"}"
            echo "$key=$value" >> $GITHUB_ENV
          done < build.config

      - name: Build image and push to Docker Hub and GitHub Container Registry
        uses: docker/build-push-action@v5
        with:
          # relative path to the place where source code with Dockerfile is located
          context: ./
          # Note: tags has to be all lower-case
          tags: |
            ginedecoen/gitops:${{env.BUILD}}-${{ github.sha }}
          # tags: |
          #   ginedecoen/gitops:${{ github.sha }}
          #   ghcr.io/ginedecoen/gitops:${{ github.sha }}
          # build on feature branches, push only on main branch
          push: ${{ github.ref == 'refs/heads/main' }}

  update-manifest-stage:
    runs-on: ubuntu-latest
    needs: ["build-and-push-docker-image"]
    steps:
      - name: Read Environment Variables
        run: |
          while IFS='=' read -r key value; do
            value="${value//\"}"
            echo "$key=$value" >> $GITHUB_ENV
          done < build.config

      - name: Print Environment Variables
        run: |
          env | grep -i build
          echo $BUILD
          echo ${BUILD}
          echo ${{env.BUILD}}

      - uses: actions/checkout@v4
        with:
          repository: CodeHariK/gitaction
          ref: "main"
          token: ${{ secrets.G_TOKEN }}

      - name: setup git config
        run: |
          git config --global user.email "CodeHariK@gmail.com"
          git config --global user.name "CodeHariK"

          echo $BUILD
          echo ${BUILD}
          echo ${{env.BUILD}}

          export GITUSER=$(echo $GITHUB_ACTOR)
          export IMAGE_TAG=$(echo $GITHUB_SHA)
          export DATE=$(date)

          for file in *.tmpl; do
              printf "\n~> ${file%.tmpl}\n"
              timestamp=$(date +"# Auto-Generated : %Y-%m-%d %H:%M:%S")
              envsubst < "$file" > "${file%.tmpl}.yaml.tmp"
              echo "$timestamp" > "${file%.tmpl}.yaml"
              echo "# Build: ${{env.BUILD}}" >> "${file%.tmpl}.yaml"
              echo "" >> "${file%.tmpl}.yaml"
              cat "${file%.tmpl}.yaml.tmp" >> "${file%.tmpl}.yaml"
              rm "${file%.tmpl}.yaml.tmp"
              diff -yt "${file%.tmpl}.yaml" $file
          done

          git add -A
          git status  # Add this line to print the git status
          git diff    # Add this line to print the changes
          git commit -m "Update image for - ${SHA}"
          git push origin main
